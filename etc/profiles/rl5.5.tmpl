{% python
    kickstart = "http://web-kickstart.linux.ncsu.edu/ks.py"
    installtree = tree

    if not defined('enable'): enable = None

    def error(msg):
        raise ParseError(msg)
%}\
{% choose defined('lang') %}\
{%   when True  %}lang ${lang}{% end %}\
{%   when False %}lang en_US{% end %}\
{% end %}

{% if defined('cmdline') %}\
cmdline
{% end %}\
install
{% choose hasattr(enable, 'staticip') %}\
{%      when True %}\
network --bootproto static  --ip ${enable.staticip[0]} --netmask ${enable.staticip[1]} --gateway ${enable.staticip[2]} --nameserver ${enable.staticip[3]}
{%      end %}\
{%      when False %}\
network --bootproto dhcp
{%      end %}\
{% end %}
url --url $installtree

repo --name=RealmLinux --baseurl=http://install.linux.ncsu.edu/pub/yum/CLS/RealmLinux/5/base/$arch
{% if defined('repo') %}\
{%      for r in repo.allRows() %}\
repo $r
{%      end %}\
{% end %}\

{% if defined('vnc') %}\
vnc $vnc
{% end %}\
{% if defined('text') %}\
text
{% end %}\
{% if defined('ignoredisk') %}\
ignoredisk $ignoredisk
{% end %}\
{% if defined('multipath') %}\
multipath $multipath
{% end %}\
{% if defined('logging') %}\
logging $logging
{% end %}\
\
{% if not defined('skippartition') %}\
zerombr
{%      if defined('clearpart') %}\
clearpart $clearpart
{% end %}\
{% if not defined('clearpart') %}\
{%      choose hasattr(enable, 'safepartition') %}\
{%          when True  %}clearpart --linux{% end %}\
{%          when False %}clearpart --all{% end %}\
{%      end %}\
{% end %}
{% choose defined('part') %}\
{%      when True %}\
{%          for p in part.allRows() %}\
part $p
{%          end %}\
{%          if defined('raid') %}\
{%              for r in raid.allRows() %}\
raid $r
{%              end %}\
{%          end %}\
{%          if  defined('volgroup') %}\
{%              for v in volgroup.allRows() %}\
volgroup $v
{%              end %}\
{%          end %}\
{%          if defined('logvol') %}\
{%              for l in logvol.allRows() %}\
logvol $l
{%              end %}\
{%          end %}\
{%      end %}\
{%      when False %}\
part /boot --size 512
part pv.00 --fstype=LVM --size 19968 --grow
volgroup Volume00 pv.00
logvol swap     --recommended --fstype swap --vgname=Volume00 --name=swap
logvol /          --size 8704 --fstype ext3 --vgname=Volume00 --name=root
logvol /tmp       --size 2048 --fstype ext3 --vgname=Volume00 --name=tmp
logvol /var       --size 7168 --fstype ext3 --vgname=Volume00 --name=var
{%      end %}\
{% end %}\
{% end %}{# end skippartition #}
{% choose defined('selinux') %}\
{%      when True %}\
selinux $selinux
{%      end %}\
{%      when False %}\
selinux --disabled
{%      end %}\
{% end %}\
timezone --utc US/Eastern
keyboard us
reboot

{% if hasattr(enable, 'nofirewall') %}\
firewall --disabled
{% end %}\
{% if not hasattr(enable, 'nofirewall') %}\
{%      choose defined('firewall') %}\
{%          when True  %}\
firewall $firewall
{%          end %}\
{%          when False %}\
firewall --enabled --ssh --port=afs3-callback:tcp,afs3-callback:udp,afs3-errors:tcp,afs3-errors:udp
{%          end %}\
{%      end %}\
{% end %}\

auth --useshadow --enablemd5 --enableldap --ldapserver ldap.ncsu.edu --ldapbasedn dc=ncsu,dc=edu --enablecache --enablekrb5 --enablekrb5kdcdns --krb5realm EOS.NCSU.EDU

{% choose hasattr(enable, 'nox') or defined('skipx') %}\
{%      when True %}\
skipx
{%      end %}\
{%      when False %}\
{%          choose defined('xconfig') %}\
{%              when True %}\
xconfig $xconfig
{%              end %}\
{%              when False %}\
xconfig --resolution "1280x1024" --depth 24 --defaultdesktop GNOME --startxonboot
{%              end %}\
{%          end %}\
{%      end %}\
{% end %}\
{% if defined('monitor') %}\
monitor $monitor
{% end %}\

{% python
    if not defined('rootpw'):
        error("Root password not set: Refusing to build Kickstart")

    if hasattr(enable, 'keepmbr'):
        bootloaderlocation = "--location partition"
    else:
        bootloaderlocation = "--location mbr"

    if defined('driveorder'):
        bootloaderdrives = "--driveorder " + driveorder.verbatim()
    else:
        bootloaderdrives = ""
%}\
{% choose defined('grub') %}\
{%      when True %}\
bootloader $bootloaderlocation $bootloaderdrives --md5pass $grub
{%      end %}\
{%      when False %}\
bootloader $bootloaderlocation $bootloaderdrives --md5pass $rootpw
{%      end %}\
{% end %}\
rootpw --iscrypted $rootpw

{% if defined('include') %}\
{%      for i in include.allRows() %}\
%include $i
{%      end %}\
{% end %}\

%packages
{% choose defined('package') %}\
{%      when True %}\
{%          for p in package.allRows() %}\
{%              choose %}\
{%              when p.match('@.*[Rr]ealm.*[Ss]erver$') %}\
@ realmlinux-base
@ editors
@ base
@ text-internet
@ legacy-software-support
@ system-tools
@ admin-tools
@ base-x
@ java
- logwatch
- yum-updatesd
{%              end %}\
{%              when p.match('@.*[Rr]ealm.*[Ww]orkstation$') %}\
{%                  if webKickstart.profile.match('client.*') %}\
@ eclipse
{%                  end %}\
@ realmlinux-base
@ realmlinux-devel
@ authoring-and-publishing
@ editors
@ engineering-and-scientific
@ games
@ graphical-internet
@ graphics
@ office
@ sound-and-video
@ text-internet
@ gnome-desktop
@ kde-desktop
@ development-libs
@ development-tools
@ gnome-software-development
@ java-development
@ kde-software-development
@ legacy-software-development
@ ruby
@ x-software-development
@ admin-tools
@ java
@ legacy-software-support
@ system-tools
@ base-x
-logwatch
-yum-updatesd
{%              end %}\
{%              otherwise %}\
$p
{%              end %}\
{%              end %}\
{%          end %}\
{%      end %}\
{%      when False %}\
@ realmlinux-base
@ realmlinux-devel
@ authoring-and-publishing
@ editors
@ engineering-and-scientific
@ games
@ graphical-internet
@ graphics
@ office
@ sound-and-video
@ text-internet
@ gnome-desktop
@ kde-desktop
@ development-libs
@ development-tools
@ gnome-software-development
@ java-development
@ kde-software-development
@ legacy-software-development
@ ruby
@ x-software-development
@ admin-tools
@ java
@ legacy-software-support
@ system-tools
@ base-x
-logwatch
-yum-updatesd
{%      end %}\
{% end %}\

%post
(

# Let's make DNS work
cat << EOF > /etc/resolv.conf
nameserver 152.1.1.206
nameserver 152.1.1.161
EOF

# Make available the ethernet interface we are using
# ksdevice may == 'link' so lets just grab the goods from the route table
KSDEVICE=`/sbin/route -n | awk '/^0.0.0.0/ { print $8 }'`
if [ "$$KSDEVICE" = "" ]; then 
    KSDEVICE=eth0
fi

# Want a /.version file.
echo "Kickstarted `/bin/date +%D`" > /.version
rpm -qa | sort >> /.version

# make startup non-interactive
mv /etc/sysconfig/init /etc/sysconfig/init~
sed 's/^PROMPT=yes$/PROMPT=no/' < /etc/sysconfig/init~ > /etc/sysconfig/init
rm /etc/sysconfig/init~

# fix /etc/hosts still
(grep -v localhost /etc/hosts ; echo "127.0.0.1 localhost.localdomain   localhost") > /etc/hosts.new && mv /etc/hosts.new /etc/hosts

#so apropos works
/usr/sbin/makewhatis >/dev/null 2>&1 || :

# Set the system time and hardware clock (wich is in UTC)
/usr/sbin/ntpdate -b time.ncsu.edu
/sbin/hwclock --systohc --utc

# updates
realmconfig --kickstart updates --enable-updates

{% choose hasattr(enable, 'audit') %}\
{%      when True %}\
# make sure audit is on
chkconfig auditd on
{%      end %}\
{%      when False %}\
# turn off audit and remove any logs
chkconfig auditd off
rm -rf /var/log/audit
rm -rf /var/log/audit.d/*
{%      end %}\
{% end %}\

{% if not hasattr(enable, 'noreinstall') %}\
# set up a reinstall image using the realmlinux-reinstall package's
# provided images.  This package is a RL mandatory package so it should
# be in place at this point.
/sbin/grubby --add-kernel=/boot/install/gpxe.lkrn \
   --title="Reinstall Workstation (PXE)" --copy-default
{% end %}\

{% python
    if not defined('realmadmins'):
        error("NCSU Realm Admins are not defined, something is wrong")

    allAdmins = realmadmins + realmotheradmins
    allUsers  = realmadmins + realmotheradmins + realmusers
    hardUsers = realmotheradmins + realmusers
%}\
cat << EOF > /root/.k5login
{% for user in allAdmins.sortunique() %}\
$user/root@EOS.NCSU.EDU
{% end %}\
EOF
chmod 400 /root/.k5login

cat << EOF > /root/.k5login.base
{% for user in realmotheradmins.sort() %}\
$user/root@EOS.NCSU.EDU
{% end %}\
EOF
chmod 400 /root/.k5login.base

cat << EOF >> /etc/sudoers
{% for user in allAdmins.sortunique() %}\
$user ALL=(ALL) ALL
{% end %}\
EOF
chmod 400 /etc/sudoers

cat << EOF >> /etc/sudoers.base
{% for user in realmotheradmins.sort() %}\
$user ALL=(ALL) ALL
{% end %}\
EOF
chmod 400 /etc/sudoers.base

cat << EOF >> /etc/users.local
{% for user in allUsers.sortunique() %}\
$user
{% end %}\
EOF
chmod 644 /etc/users.local

cat << EOF >> /etc/users.local.base
{% for user in hardUsers.sortunique() %}\
$user
{% end %}\
EOF
chmod 644 /etc/users.local.base

{% python
    if hasattr(enable, 'receivemail'):
        sendmaildaemon = "--enable-daemon"
    else:
        sendmaildaemon = "--disable-daemon"

    if hasattr(enable, 'mailmasq'):
        if enable.mailmasq.len() == 1:
            sendmailMasq = "--masquerade %s" % enable.mailmasq
        elif enable.mailmasq.len() == 0:
            sendmailMasq = "--no-masq"
        else:
            error("enable mailmasq accepts only 1 argument")
    else:
        sendmailMasq = "--masquerade unity.ncsu.edu"
%}\
realmconfig --kickstart sendmail $sendmaildaemon $sendmailMasq

{% if defined('owner') %}\
# Setup forwarding for root's mail
cat << EOF >> /etc/aliases
root:       $owner
EOF
/usr/bin/newaliases
{% end %}\

{% if hasattr(enable, 'consolelogin') %}\
# Enable console login by non-local users
# RL4.4 and below don't have this code, however this is the default anyway
realmconfig --kickstart pamconf --enable-console-login || true
{% end %}\
{% if not hasattr(enable, 'consolelogin') %}\
# disable login on the console for non-local users
# RL4.4 and below don't have this code so we need to case that out
if realmconfig --kickstart pamconf --disable-console-login | grep "No such module"; then
    mv /etc/pam.d/login /etc/pam.d/login~
    sed s/system-auth/remote-auth/ /etc/pam.d/login~ > /etc/pam.d/login
    rm /etc/pam.d/login~
fi
{% end %}\

{% if not hasattr(enable, 'notempclean') %}\
realmconfig --kickstart tmpclean --enable-tmpclean
{% end %}\
\
{% python
    if not hasattr(enable, 'localcluster'):
        localcluster = "ncsu"
    elif enable.localcluster.len() == 0:
        localcluster = ""
    else:
        localcluster = str(enable.localcluster)

    if not hasattr(enable, 'remotecluster'):
        remotecluster = "None"
    elif enable.remotecluster.len() == 0:
        remotecluster = ""
    else:
        remotecluster = str(enable.remotecluster)
%}\
{% choose localcluster == "None" %}\
{%      when True %}\
realmconfig --kickstart clusters --local-disable
{%      end %}\
{%      when False %}\
realmconfig --kickstart clusters --local-enable $localcluster
{%      end %}\
{% end %}\
\
{% choose remotecluster == "None" %}\
{%      when True %}\
realmconfig --kickstart clusters --remote-disable
{%      end %}\
{%      when False %}\
realmconfig --kickstart clusters --remote-enable $remotecluster
{%      end %}\
{% end %}\
\
{% choose defined('dept') %}\
{%      when True %}\
realmconfig --kickstart dept --set $dept
{%      end %}\
{%      when False %}\
realmconfig --kickstart dept --set ncsu
{%      end %}\
{% end %}\
\
{% choose defined('printer') %}\
{%      when True %}\
realmconfig --kickstart printing --default $printer
{%      end %}\
{%      when False %}\
realmconfig --kickstart printing --default lp
{%      end %}\
{% end %}\
\
{% choose hasattr(enable, 'norealmcron') %}\
{%      when True %}\
realmconfig --kickstart support --disable-support
{%      end %}\
{%      when False %}\
realmconfig --kickstart support --enable-support
{%      end %}\
{% end %}\

{% if defined('staticip') %}\
# M-DHCP to Static IP conversion hack because the Comtech[tm] DHCP server
# is not always up. Originally by Lin Osborne (ITECS).

# Figure out the relevant information about this system
IP=`/sbin/ifconfig $$KSDEVICE | /bin/awk '/inet/ && !/inet6/ {sub(/addr:/, ""); print $2}'`
HOSTNAME=`/usr/bin/host $$IP | /bin/awk '{sub(/\.$/, ""); print $5}'`
NETMASK=`/sbin/ifconfig $$KSDEVICE | /bin/awk '/inet/ && !/inet6/ {sub(/Mask:/, ""); print $4}'`
NETWORK=`/bin/ipcalc $$IP -n $$NETMASK | /bin/cut -d\= -f2`
GATEWAY=`/sbin/route -n | /bin/awk '/^0\.0\.0\.0/ { print $2 }'`
HWADDR=`/sbin/ifconfig $$KSDEVICE | /bin/awk '/HWaddr/ { print $5 }'`

# Overwrite the appropriate files (/etc/sysconfig/network and
# /etc/sysconfig/network-scripts/ifcfg-eth0) to make the system not reliant
# upon DHCP
cat << EOF > /etc/sysconfig/network
NETWORKING=yes
HOSTNAME=$$HOSTNAME
GATEWAY=$$GATEWAY
EOF

cat << EOF > /etc/sysconfig/network-scripts/ifcfg-$$KSDEVICE
DEVICE=$$KSDEVICE
BOOTPROTO=static
IPADDR=$$IP
NETMASK=$$NETMASK
ONBOOT=yes
HWADDR=$$HWADDR
EOF

{% end %}\
\
{% if hasattr(rootpw, 'localpw') %}\
# Web-Kickstart config contains a local root password hash
# Let's not automatically change/update the user's password
touch /etc/local-root

{% end %}\
\
{% python
    if defined ('activationkey'):
        _akey = str(activationkey)
    elif hasattr(enable, 'activationkey'):
        _akey = str(enable.activationkey)
    else:
        _akey = str(defaultactivation)
%}\
# The registration program's not smart enough to figure out the host name
# with out this the profile reads "localhost.localdomain"
FQDN="${webKickstart.remoteHost}"
/usr/sbin/rhnreg_ks --activationkey $_akey        \
    --profilename $$FQDN                          \
    --serverUrl https://rhn.linux.ncsu.edu/XMLRPC \
    --sslCACert /usr/share/rhn/RHN-ORG-TRUSTED-SSL-CERT

# Import the RPM GPG keys
if [ -f /usr/share/rhn/RPM-GPG-KEY ] ; then
    /bin/rpm --import /usr/share/rhn/RPM-GPG-KEY
fi
if [ -f /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release ] ; then
    /bin/rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release
fi
if [ -f /usr/share/realmconfig/realmkit.gpg ] ; then
    /bin/rpm --import /usr/share/realmconfig/realmkit.gpg
fi
if [ -f /usr/share/realmconfig/data/realmkit.gpg ] ; then
    /bin/rpm --import /usr/share/realmconfig/data/realmkit.gpg
fi

# Set Up2Date Configuration
if [ -f /usr/share/realmconfig/default-modules/up2date.py ] ; then
    /usr/bin/python /usr/share/realmconfig/default-modules/up2date.py -f
fi

# Run Yum update
chvt 3
/usr/bin/yum -y update yum
/usr/bin/yum -y update
chvt 1

# Final Fixes for RHEL 5
# Fix for Red Hat Bug #236669
sed --in-place 's/^protocols.*files ldap/protocols:  files/' /etc/nsswitch.conf

) 2>&1 | /usr/bin/tee /root/rl.post 

# The following scripts provided by the Jump Start confgs.

{% for script in webKickstart.scripts.allRows() %}\
$script
{% end %}\
