{% python
    kickstart = "http://web-kickstart.linux.ncsu.edu/ks.py"
    installtree = tree

    if not defined('enable'): enable = None

    def error(msg):
        raise ParseError(msg)
%}\
{% choose defined('lang') %}\
{%   when True  %}lang ${lang}{% end %}\
{%   when False %}lang en_US{% end %}\
{% end %}

{% if defined('cmdline') %}\
cmdline
{% end %}\
install
{% choose hasattr(enable, 'staticip') %}\
{%      when True %}\
network --bootproto static  --ip ${enable.staticip[0]} --netmask ${enable.staticip[1]} --gateway ${enable.staticip[2]} --nameserver ${enable.staticip[3]}
{%      end %}\
{%      when False %}\
network --bootproto dhcp
{%      end %}\
{% end %}
url --url $installtree

repo --name=RealmLinux --baseurl=http://install.linux.ncsu.edu/pub/yum/CLS/RealmLinux/6/base/$arch
{% if defined('repo') %}\
{%      for r in repo.allRows() %}\
repo $r
{%      end %}\
{% end %}\

{% if defined('vnc') %}\
vnc $vnc
{% end %}\
{% if defined('text') %}\
text
{% end %}\
{% if defined('ignoredisk') %}\
ignoredisk $ignoredisk
{% end %}\
{% if defined('multipath') %}\
multipath $multipath
{% end %}\
{% if defined('logging') %}\
logging $logging
{% end %}\
\
{% if not defined('skippartition') %}\
zerombr
{%      if defined('clearpart') %}\
clearpart $clearpart
{% end %}\
{% if not defined('clearpart') %}\
{%      choose hasattr(enable, 'safepartition') %}\
{%          when True  %}clearpart --linux{% end %}\
{%          when False %}clearpart --all{% end %}\
{%      end %}\
{% end %}
{% choose defined('part') %}\
{%      when True %}\
{%          for p in part.allRows() %}\
part $p
{%          end %}\
{%          if defined('raid') %}\
{%              for r in raid.allRows() %}\
raid $r
{%              end %}\
{%          end %}\
{%          if  defined('volgroup') %}\
{%              for v in volgroup.allRows() %}\
volgroup $v
{%              end %}\
{%          end %}\
{%          if defined('logvol') %}\
{%              for l in logvol.allRows() %}\
logvol $l
{%              end %}\
{%          end %}\
{%      end %}\
{%      when False %}\
part /boot --size 512
part pv.00 --fstype=LVM --size 18432 --grow
volgroup Volume00 pv.00
logvol /          --size 8192 --fstype ext4 --vgname=Volume00 --name=root
logvol swap     --recommended --fstype swap --vgname=Volume00 --name=swap
logvol /tmp       --size 2048 --fstype ext4 --vgname=Volume00 --name=tmp
logvol /var       --size 2048 --fstype ext4 --vgname=Volume00 --name=var
{%      end %}\
{% end %}\
{% end %}{# end skippartition #}
{% choose defined('selinux') %}\
{%      when True %}\
selinux $selinux
{%      end %}\
{%      when False %}\
selinux --disabled
{%      end %}\
{% end %}\
timezone --utc America/New_York
keyboard us
reboot

{% if hasattr(enable, 'nofirewall') %}\
firewall --disabled
{% end %}\
{% if not hasattr(enable, 'nofirewall') %}\
{%      choose defined('firewall') %}\
{%          when True  %}\
firewall $firewall
{%          end %}\
{%          when False %}\
firewall --enabled --ssh --port=afs3-callback:tcp,afs3-callback:udp,afs3-errors:tcp,afs3-errors:udp
{%          end %}\
{%      end %}\
{% end %}\

auth --useshadow --enablemd5 --enableldap --ldapserver ldap.ncsu.edu --ldapbasedn dc=ncsu,dc=edu --enablekrb5 --enablekrb5kdcdns --krb5realm EOS.NCSU.EDU

{% choose hasattr(enable, 'nox') or defined('skipx') %}\
{%      when True %}\
skipx
{%      end %}\
{%      when False %}\
{%          choose defined('xconfig') %}\
{%              when True %}\
xconfig $xconfig
{%              end %}\
{%              when False %}\
xconfig --defaultdesktop GNOME --startxonboot
{%              end %}\
{%          end %}\
{%      end %}\
{% end %}\
{% if defined('monitor') %}\
monitor $monitor
{% end %}\

{% python
    if not defined('rootpw'):
        error("Root password not set: Refusing to build Kickstart")

    if hasattr(enable, 'keepmbr'):
        bootloaderlocation = "--location partition"
    else:
        bootloaderlocation = "--location mbr"

    if defined('driveorder'):
        bootloaderdrives = "--driveorder " + driveorder.verbatim()
    else:
        bootloaderdrives = ""
%}\
{% choose defined('grub') %}\
{%      when True %}\
bootloader $bootloaderlocation $bootloaderdrives --md5pass $grub
{%      end %}\
{%      when False %}\
bootloader $bootloaderlocation $bootloaderdrives --md5pass $rootpw
{%      end %}\
{% end %}\
rootpw --iscrypted $rootpw

{% if defined('include') %}\
{%      for i in include.allRows() %}\
%include $i
{%      end %}\
{% end %}\

%packages
{% choose defined('package') %}\
{%      when True %}\
{%          for p in package.allRows() %}\
{%              choose %}\
{%              when p.match('@.*[Rr]ealm.*[Ss]erver$') %}\
@ base
@ core
@ directory-client
@ network-file-system-client
@ perl-runtime
@ realmlinux-base
@ realmlinux-devel
@ server-platform
@ system-admin-tools 
- logwatch
- yum-updatesd
{%              end %}\
{%              when p.match('@.*[Rr]ealm.*[Ww]orkstation$') %}\
{%                  if webKickstart.profile.match('client.*') %}\
# Extra client only packages
@ office-suite
thunderbird
pidgin
{%                  end %}\
@ base
@ core
@ directory-client
@ network-file-system-client
@ perl-runtime
@ realmlinux-base
@ realmlinux-devel
@ system-admin-tools 
@ basic-desktop
@ compat-libraries
@ console-internet
@ desktop-platform
@ eclipse
@ emacs 
@ fonts
@ general-desktop 
@ graphical-admin-tools
@ graphics
@ internet-browser
@ java-platform
@ kde-desktop
@ legacy-x
@ network-tools
@ print-client
@ remote-desktop-clients
@ scientific
@ technical-writing
@ tex
{% if not (hasattr(enable, 'nox') or defined('skipx')) %}\
@ x11
{% end %}\
@ debugging
@ desktop-debugging
@ desktop-platform-devel
@ development
@ virtualization
@ virtualization-tools
-logwatch
-yum-updatesd
-gnome-packagekit
{%              end %}\
{%              otherwise %}\
$p
{%              end %}\
{%              end %}\
{%          end %}\
{%      end %}\
{%      when False %}\
{%                  if webKickstart.profile.match('client.*') %}\
# Extra client only packages
@ office-suite
thunderbird
pidgin
{%                  end %}\
@ base
@ core
@ directory-client
@ network-file-system-client
@ perl-runtime
@ realmlinux-base
@ realmlinux-devel
@ system-admin-tools 
@ basic-desktop
@ compat-libraries
@ console-internet
@ desktop-platform
@ eclipse
@ emacs 
@ fonts
@ general-desktop 
@ graphical-admin-tools
@ graphics
@ internet-browser
@ java-platform
@ kde-desktop
@ legacy-x
@ network-tools
@ print-client
@ remote-desktop-clients
@ scientific
@ technical-writing
@ tex
{% if not (hasattr(enable, 'nox') or defined('skipx')) %}\
@ x11
{% end %}\
@ debugging
@ desktop-debugging
@ desktop-platform-devel
@ development
@ virtualization
@ virtualization-tools
-logwatch
-yum-updatesd
-gnome-packagekit
{%      end %}\
{% end %}\

%post
exec < /dev/tty3 > /dev/tty3
chvt 3

(
echo "Running %post scripts.  Output stored in /root/rl.post"

# Make available the ethernet interface we are using
# ksdevice may == 'link' so lets just grab the goods from the route table
KSDEVICE=`/sbin/route -n | awk '/^0.0.0.0/ { print $8 }'`
if [ "$$KSDEVICE" = "" ]; then 
    KSDEVICE=eth0
fi

# Want a /.version file.
echo "Kickstarted `/bin/date +%D`" > /.version
rpm -qa | sort >> /.version

# make startup non-interactive
mv /etc/sysconfig/init /etc/sysconfig/init~
sed 's/^PROMPT=yes$/PROMPT=no/' < /etc/sysconfig/init~ > /etc/sysconfig/init
rm /etc/sysconfig/init~

# fix /etc/hosts still
(grep -v localhost /etc/hosts ; echo "127.0.0.1 localhost.localdomain   localhost") > /etc/hosts.new && mv /etc/hosts.new /etc/hosts

# so apropos works
/usr/sbin/makewhatis >/dev/null 2>&1 || :

# Set the system time and hardware clock (wich is in UTC)
/usr/sbin/ntpdate -b time.ncsu.edu
/sbin/hwclock --systohc --utc

# Work around a grubby bug
#   "grubby fatal error: unable to find a suitable template"
# Red Hat Bugzilla 657257, 625216
ln -s `awk '{ if ($2 == "/") print $1; }' /etc/fstab` /dev/root

{% choose hasattr(enable, 'audit') %}\
{%      when True %}\
# make sure audit is on
chkconfig auditd on
{%      end %}\
{%      when False %}\
# turn off audit and remove any logs
chkconfig auditd off
rm -rf /var/log/audit
rm -rf /var/log/audit.d/*
{%      end %}\
{% end %}\

{% python
    if not defined('realmadmins'):
        error("NCSU Realm Admins are not defined, something is wrong")

    allAdmins = realmadmins + realmotheradmins
    allUsers  = realmadmins + realmotheradmins + realmusers
    hardUsers = realmotheradmins + realmusers
%}\
cat << EOF > /root/.k5login
{% for user in allAdmins.sortunique() %}\
$user/root@EOS.NCSU.EDU
{% end %}\
EOF
chmod 400 /root/.k5login

cat << EOF > /root/.k5login.base
{% for user in realmotheradmins.sort() %}\
$user/root@EOS.NCSU.EDU
{% end %}\
EOF
chmod 400 /root/.k5login.base

cat << EOF >> /etc/sudoers
{% for user in allAdmins.sortunique() %}\
$user ALL=(ALL) ALL
{% end %}\
EOF
chmod 400 /etc/sudoers

cat << EOF >> /etc/sudoers.base
{% for user in realmotheradmins.sort() %}\
$user ALL=(ALL) ALL
{% end %}\
EOF
chmod 400 /etc/sudoers.base

cat << EOF >> /etc/users.local
{% for user in allUsers.sortunique() %}\
$user
{% end %}\
EOF
chmod 644 /etc/users.local

cat << EOF >> /etc/users.local.base
{% for user in hardUsers.sortunique() %}\
$user
{% end %}\
EOF
chmod 644 /etc/users.local.base

{# {% python
    if hasattr(enable, 'receivemail'):
        sendmaildaemon = "--enable-daemon"
    else:
        sendmaildaemon = "--disable-daemon"

    if hasattr(enable, 'mailmasq'):
        if enable.mailmasq.len() == 1:
            sendmailMasq = "--masquerade %s" % enable.mailmasq
        elif enable.mailmasq.len() == 0:
            sendmailMasq = "--no-masq"
        else:
            error("enable mailmasq accepts only 1 argument")
    else:
        sendmailMasq = "--masquerade unity.ncsu.edu"
%}\
realmconfig --kickstart sendmail $sendmaildaemon $sendmailMasq #}\

{% if defined('owner') %}\
# Setup forwarding for root's mail
cat << EOF >> /etc/aliases
root:       $owner
EOF
/usr/bin/newaliases
{% end %}\

# Setup Department
[ -d /etc/rc.conf.d ] || mkdir /etc/rc.conf.d
{% choose defined('dept') %}\
{%      when True %}\
echo "$dept" > /etc/rc.conf.d/HostDept
{%      end %}\
{%      when False %}\
echo "ncsu" > /etc/rc.conf.d/HostDept
{%      end %}\
{% end %}\

{% if defined('staticip') %}\
# M-DHCP to Static IP conversion hack because the Comtech[tm] DHCP server
# is not always up. Originally by Lin Osborne (ITECS).

# Figure out the relevant information about this system
IP=`/sbin/ifconfig $$KSDEVICE | /bin/awk '/inet/ && !/inet6/ {sub(/addr:/, ""); print $2}'`
# HOSTNAME=`/usr/bin/host $$IP | /bin/awk '{sub(/\.$/, ""); print $5}'`
NETMASK=`/sbin/ifconfig $$KSDEVICE | /bin/awk '/inet/ && !/inet6/ {sub(/Mask:/, ""); print $4}'`
NETWORK=`/bin/ipcalc $$IP -n $$NETMASK | /bin/cut -d\= -f2`
GATEWAY=`/sbin/route -n | /bin/awk '/^0\.0\.0\.0/ { print $2 }'`
HWADDR=`/sbin/ifconfig $$KSDEVICE | /bin/awk '/HWaddr/ { print $5 }'`

# Bcfg2 manages /etc/sysconfig/network by default.  Enabling the
# feature-staticip group will turn off modification of this file.
# Bcfg2 can manage the network configuration files if the local
# SA codes the spefic information into the specification.

if ! grep feature-staticip /etc/realmlinux-groups > /dev/null ; then 
    echo "feature-staticip" >> /etc/realmlinux-groups
fi

# Overwrite the appropriate files (/etc/sysconfig/network and
# /etc/sysconfig/network-scripts/ifcfg-eth0) to make the system not reliant
# upon DHCP
cat << EOF > /etc/sysconfig/network
NETWORKWAIT=yes
NETWORKING=yes
NETWORKING_IPV6=no
HOSTNAME=${webKickstart.remoteHost}
DHCP_HOSTNAME=\$$HOSTNAME
GATEWAY=$$GATEWAY
EOF

cat << EOF > /etc/sysconfig/network-scripts/ifcfg-$$KSDEVICE
DEVICE=$$KSDEVICE
BOOTPROTO=static
IPADDR=$$IP
NETMASK=$$NETMASK
ONBOOT=yes
HWADDR=$$HWADDR
EOF

{% end %}\
\
{% python
    if defined ('activationkey'):
        _akey = str(activationkey)
    elif hasattr(enable, 'activationkey'):
        _akey = str(enable.activationkey)
    else:
        _akey = str(defaultactivation)
%}\
# The registration program's not smart enough to figure out the host name
# with out this the profile reads "localhost.localdomain"
FQDN="${webKickstart.remoteHost}"
/usr/sbin/rhnreg_ks --activationkey $_akey        \
    --profilename $$FQDN                          \
    --serverUrl https://rhn.linux.ncsu.edu/XMLRPC \
    --sslCACert /usr/share/rhn/RHN-ORG-TRUSTED-SSL-CERT 

# Run Yum/Bcfg2 update
/usr/bin/yum -y update yum bcfg2 rlmtools
{% choose defined('rlmtoolssession') %}\
{%      when True %}\
/usr/bin/ncsuclient --session ${rlmtoolssession}
{%      end %}
{%      when False %}\
/usr/bin/ncsuclient
{%      end %}\
{% end %}\
/usr/bin/yum -y update

{% if not hasattr(enable, 'noreinstall') %}\
# set up a reinstall image
mkdir -p /boot/install
cd /boot/install
if [ ! -f vmlinuz ] ; then
    wget $installtree/images/pxeboot/vmlinuz
fi
if [ ! -f initrd.img ] ; then
    wget $installtree/images/pxeboot/initrd.img
fi

/sbin/grubby --add-kernel=/boot/install/vmlinuz \
   --title="Reinstall Workstation" \
   --copy-default \
   --args="ks=$kickstart noshell noipv6 ksdevice=$$KSDEVICE" \
   --initrd=/boot/install/initrd.img
{% end %}\

# Bootstrap Bcfg2
/usr/bin/ncsubootstrap -p realmlinux-el6-${arch}

echo "Running Bcfg2 again..."
/usr/sbin/bcfg2 -v
chvt 1

) 2>&1 | /usr/bin/tee /root/rl.post
%end

# The following scripts provided by the Jump Start confgs.

{% for script in webKickstart.scripts.allRows() %}\
$script
{% end %}\
