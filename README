Web-Kickstart
=============

Version 3.0-ish.

Copyright 2002-2008 NC State University
Written by
   Jack Neely   <jjneely@pams.ncsu.edu>
   Elliot Peele <ebpeele2@pams.ncsu.edu>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


Introduction
------------

Your IT team has thousands of workstations and servers to maintain just
like every other enterprise class organization or educational institution.
Hundreds of these machines run Red Hat Linux or a custom distribution
based on Red Hat Linux or Fedora Core.  Clearly you need an automated
solution to install these linux machines and configure them properly for
your environment.

With Red Hat Linux or Fedora Core this is where Kickstart comes into
play.  You simply have a custom boot disk that grabs the kickstart file
off a server and automates the complete install or just with the ks
boot option.  However, your kickstarts are mostly the same except for 
small bits, like a printer, and there's not an overly good way to have 
server based kickstart that can include other kickstarts.  Also, other 
folks in your IT team(s) may not know how a kickstart works enough to 
create them.  Kickstarts are long and tedious.

Here is where Web-Kickstart comes in.  Web-Kickstart reads small
config files from a central location, such as your distributed file
system or a server.  These files follow in a similar style to
<key> [value ...].  With two to four lines you can have a highly
customized and configure linux install.  Config files can include
other files, and you can even attach multiple %post's and %pre's.
Web-Kickstart takes this config file, loads it into a Cheetah template
that you can customize, dynamically generates a complete kickstart,
and sends it to the installing client via HTTP.  For example, I can
install a Realm Linux 9 machine (which is a customized version of
Red Hat Linux 9 used at NC State University) with something this
simple:

   version 9
   printer cox359a@print-server.ncsu.edu
   enable adminusers jjneely

This specifies the version to install which is the only required line,
specifies the proper default printer, and adds a user to the administrative
users for the machine.  The rest of the install is controlled by the
defaults in the class.  

Included is a template and documentation for installing stock RHEL
or Fedora.  These are the basis of the working templates I use at NC
State University to install Realm Linux as an example for how you can
customize the software.  

Feedback and patches welcome!


Installing
----------

The RPMs provided or generated from the Makefile should get everything
installed for you.  

You can run WebKickstart through Apache via mod_python or by using the 
stand alone basic server.  The ks.py file is the mod_python handler while
basicserver.py runs an HTTP server with Python's build it baseHTTPServer.

The basic server can be run like so

    python simplewebkickstart.py -C /path/to/conf/dir

The default for the configuration directory is /etc/webkickstart.

To do some quick testing and generation of kickstarts you can use the
following:

    python makekickstart.py -C /bah/foo foghorn.unity.ncsu.edu

Configuring
-----------

All the configuration bits normally go in an /etc/webkickstart directory.
The main config file is webkickstart.conf inside that directory.  
The config files for each hosts by default live in /etc/webkickstart/hosts,
configuration for any user supplied plugins in /etc/webkickstart/pluginconf.d,
and the templates or profiles in /etc/webkickstart/profiles.

You may configure WebKickstart to use a different path other than
/etc/webkickstart for configuration information.  However, it still expects
for /you/custom/path/webkickstart.conf to exist.  See the default 
webkickstart.conf for details.

You may specify the keyword you want to use to indicate which template or
profile to use and which keywords will include other config files.  You
can also specify alternate locations for where the profiles and config
files live.  Each available configuration bit is documented in the
example webkickstart.conf.

The config file has a section for each template / profile.  The section
name (the name inside [ ]) is the name that your configs must use to
refer to the template/profile they want to use.  There are two options:

    enable = 1 -- Set to enable the usage of this profile
    plugins = <plugin1>... 
               -- The list of custom plugins to run in order

Plugins are python modules that live in the webKickstart.plugins package.
The __init__.py file contains a super class for them and I've included
several examples.  These plugins give you added flexibility to add
variables and data to what the profile template can see.

Profiles
--------

The profiles are normal Cheetah templates.  You can do anything you
normally would in that environment.  Each row from a config file turns 
into a variable the template can use that is named the same as the first
token in the row.  The variables are TemplateVar objects defined in the
templatevar.py file.  This makes the variable very easy to print out 
verbatim, reference each token via its index, match a regex pattern, and
iterate through multiple rows if the same key word is used multiple times.

The example profiles provide many examples for how to use the template 
variables.


More Information
----------------

See the docs/ directory and the actual included web pages.


